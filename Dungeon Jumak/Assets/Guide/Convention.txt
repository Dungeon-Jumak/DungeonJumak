[개요]
원활한 작업과 출시 이후 유지 보수를 위해 다음과 같은 컨벤션은 꼭 지키도록 한다.
이외의 궁금한 사항이나 헷갈리는 사항이 있다면 꼭 프로그래머들에게 공유하도록 한다.

[식별자 규칙]
1. PascalCase : 클래스, public 메소드, 프로퍼티
2. camelCase : Local 변수 및 매개변수
3. _cameCase : private 함수

[선언 규칙]
1. 모든 메소드, 필드, 프로퍼티는 private과 public끼리 모아둔다.
   a. 위에서부터 public -> [SerializeField] private -> private 순

2. 변수와 관련된 선언은 다음과 같이 정의한다.
	a. 기본 식별자 규칙을 따른다.
	b. 기본은 private, 필요할 때만 public을 사용한다.
	c. 과도하게 줄여쓰지 않는다.
	d. 중복을 제거한다.  ex) Player 스크립트의 체력 변수는 playerHp(X) / hp
        f . 코드에 상수를 사용하지 않고 반드시 변수를 활용한다.
	g. 변수의 앞에는 상황에 따라 다음과 같이 접두사를 작성한다.
		- 글로벌 변수 : g_
		- 클래스 멤버 : m_
		- 클래스 스태틱 : s_
		- 메소드 스태틱 : c_


3. 함수와 관련된 선언은 다음과 같이 정의한다.
	a. 변수 할당 : Set~~
	b. 변수 반환 : Get~~
	c. 모든 함수의 이름은 동사로 작성 or 특정 상태의 분사로 작성
		ex) IncreaseHp() / OnDamaged
	d. 파라미터는 앞에 _를 붙인다.
		ex) _gameObject
	e. 자주 사용될 것 같은 메소드에는 XML 태그를 붙인다.
		ex)
		/// <summary>
		/// 설명
		/// </summary>
		/// <param name=“a”>a파라미터 설명</param>
		/// <param name=“b”>b파라미터 설명</param>
		/// <returns>반환값 설명</returns>
	f. 중복되는 내용으로 이름을 선언하지 않는다.
	g. 메소드는 하나의 기능만 가능하도록 한다.

4. 코루틴
	a, 코루틴은 최대한 자제한다.

5. 디버그 / 테스트코드
	a, 디버그나 테스트 코드 위에는 //Debug 주석을 고정으로 작성한다.
	b. 코루틴 함수 앞에는 IE_를 붙인다.
		ex) IE_Spawn()


[기타 코드 작성]
1. if-else를 삼항 연산자로 대체할 수 있으면 삼항 연산자로 대체한다.
2. 중괄호 없는 한 줄짜리 블록 절대 금지한다.
3. switch 문을 사용할 수 있다면 사용한다.


[파일의 이름]
1. 파일의 이름은 다음 가이드 내에서 작성한다.
	1-1 : 띄어쓰기는 하이픈으로 표현하며 글자의 시작은 대문자로 시작한다.
		- 식별용_(행동 or 상태)_번호
		ex) Grandma_1
	     	     Customer1_Walk_Left_1